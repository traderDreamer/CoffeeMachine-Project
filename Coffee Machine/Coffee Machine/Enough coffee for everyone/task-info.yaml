type: edu
custom_name: stage3
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n        static Coffe coffe ;\n\n    CoffeeMachine () {coffe = new Coffe();}\n\
    \n    class  Coffe {\n        int water = 200; //ml\n        int milk = 50; //ml\n\
    \        int cofeeBeans = 15; //grams\n\n    }\n    \n    public static void main(String[]\
    \ args) {\n        \n        System.out.println(\"Starting to make a coffee\"\
    );\n        System.out.println(\"Grinding coffee beans\");\n        System.out.println(\"\
    Boiling water\");\n        System.out.println(\"Mixing boiled water with crushed\
    \ coffee beans\");\n        System.out.println(\"Pouring coffee into the cup\"\
    );\n        System.out.println(\"Pouring some milk into the cup\");\n        System.out.println(\"\
    Coffee is ready!\");\n        \n         CoffeeMachine coffeeMachine = new CoffeeMachine();\n\
    \        int numberOfCoffes = 0;\n        System.out.println(\"Write how many\
    \ cups of coffee you will need:\");\n        Scanner scaner = new Scanner(System.in);\n\
    \        if (scaner.hasNextInt()) {\n            numberOfCoffes =  scaner.nextInt();\n\
    \        }\n\n        System.out.println(\"For \" +  numberOfCoffes + \" cups\
    \ of coffee you will need:\");\n        System.out.println(coffeeMachine.coffe.water\
    \ * numberOfCoffes + \" ml of water\");\n        System.out.println(coffeeMachine.coffe.milk\
    \ * numberOfCoffes + \" ml of milk\");\n        System.out.println(coffeeMachine.coffe.cofeeBeans\
    \ * numberOfCoffes + \" g of coffee beans\");\n             \n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;


    class TestClue {
        boolean cond;
        int num;
        boolean showTests;
        TestClue(boolean c, int n, boolean showTests) {
            cond = c;
            num = n;
            this.showTests = showTests;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, true))
                    .setInput("300\n65\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("600\n153\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n150\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n1500\n45\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, true))
                    .setInput("599\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 867, true))
                    .setInput( "345640\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 1548, true))
                    .setInput("345640\n434230\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 172, true))
                    .setInput( "34564\n43423\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, false))
                    .setInput("399\n112\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 3, false))
                    .setInput("2400\n249\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1, false))
                    .setInput("1400\n1500\n44\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, false))
                    .setInput("500\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 171, false))
                    .setInput("34564\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1547, false))
                    .setInput("345640\n434230\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 868, false))
                    .setInput("345640\n43423\n23234\n19246")

            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split(":");
            String userOutput = lines[lines.length - 1].trim();
            String loweredOutput = userOutput.toLowerCase();
            boolean ans = clue.cond;
            int amount = clue.num;
            if (ans) {
                if (amount > 0) {
                    boolean isCorrect =
                        loweredOutput.contains(Integer.toString(amount))
                         && loweredOutput.contains("yes");

                    if (isCorrect) {
                        return CheckResult.correct();
                    } else {

                        String rightOutput =
                            "Yes, I can make that amount of coffee" +
                                " (and even " + amount + " more than that)";

                        if (clue.showTests) {
                            return new CheckResult(false,
                                "Your output:\n" +
                                    userOutput +
                                    "\nRight output:\n" +
                                    rightOutput);
                        } else {
                            return CheckResult.wrong("");
                        }
                    }
                }

                if (loweredOutput.contains("yes")) {
                    return CheckResult.correct();
                } else {
                    String rightOutput =
                        "Yes, I can make that amount of coffee";

                    if (clue.showTests) {
                        return new CheckResult(false,
                            "Your output:\n" +
                                userOutput +
                                "\nRight output:\n" +
                                rightOutput);
                    } else {
                        return CheckResult.wrong("");
                    }
                }

            } else {
                boolean cond1 = loweredOutput.contains("no");
                boolean cond2 = loweredOutput.contains(Integer.toString(amount));

                if (cond1 && cond2) {
                    return CheckResult.correct();
                } else {

                    String rightOutput = "No, I can make only " +
                        amount +" cup(s) of coffee";

                    if (clue.showTests) {
                        return new CheckResult(false,
                            "Your output:\n" +
                            userOutput +
                            "\nRight output:\n" +
                            rightOutput);
                    } else {
                        return CheckResult.wrong("");
                    }
                }
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/177/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/33/stages/177/implement">JetBrains
    Academy</a>
  time: Sun, 02 Aug 2020 08:25:20 UTC
record: 3
